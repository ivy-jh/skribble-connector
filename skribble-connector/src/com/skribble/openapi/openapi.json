{
  "swagger": "2.0",
  "info": {
    "description": "All requests to the Skribble API must be authorized. To obtain an access token, please use the <b>/access/login</b> resource. Then add the access token as a HTTP header like:<br><code>Authorization: Bearer &lt;token></code>",
    "version": "1.0",
    "title": "Skribble API",
    "contact": {
      "name": "Skribble Engineering",
      "url": "https://api.skribble.com",
      "email": "info@skribble.com"
    },
    "license": {
      "name": "Skribble License Version 1.0"
    }
  },
  "host": "api.skribble.com",
  "basePath": "/v1",
  "tags": [
    {
      "name": "/access",
      "description": "Access Resource"
    },
    {
      "name": "/documents",
      "description": "Document Resource"
    },
    {
      "name": "/seal",
      "description": "Seal Resource"
    },
    {
      "name": "/signature-requests",
      "description": "Signature Request Resource"
    },
    {
      "name": "/user",
      "description": "User Resource"
    }
  ],
  "paths": {
    "/access/login": {
      "post": {
        "tags": [
          "/access"
        ],
        "summary": "Login to receive an access token.",
        "operationId": "loginUsingPOST",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "User-Agent",
            "in": "header",
            "description": "User-Agent",
            "required": false,
            "type": "string"
          },
          {
            "name": "api-key",
            "in": "formData",
            "description": "Your api-key or password",
            "required": false,
            "type": "string",
            "x-example": "00000000-0000-0000-0000-000000000000"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "Your username",
            "required": false,
            "type": "string",
            "x-example": "Customer_A"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an access token. All API calls are protected by an access token. Every other API call expects to receive an access token inside the 'Authorization' HTTP header with a 'Bearer' prefix.\n Example 'Authorization: Bearer &lt;token>'",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/documents": {
      "get": {
        "tags": [
          "/documents"
        ],
        "summary": "List all Documents.",
        "operationId": "listUsingGET",
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Document"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "/documents"
        ],
        "summary": "Create a Document.",
        "operationId": "createUsingPOST",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createDocument",
            "description": "createDocument",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Either `content_type`+`content` or `file_url` are required."
          },
          "406": {
            "description": "PDF document loading error: the document is either corrupt or encrypted"
          }
        },
        "deprecated": false
      }
    },
    "/documents/{id}": {
      "get": {
        "tags": [
          "/documents"
        ],
        "summary": "Get meta data of Document with ID {id}.",
        "operationId": "getUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "/documents"
        ],
        "summary": "Delete Document with ID {id}.",
        "operationId": "deleteUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/documents/{id}/content": {
      "get": {
        "tags": [
          "/documents"
        ],
        "summary": "Get content of Document with ID {id}.",
        "operationId": "contentUsingGET",
        "produces": [
          "application/pdf",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/documents/{id}/pages/{pageNumber}": {
      "get": {
        "tags": [
          "/documents"
        ],
        "summary": "Get page {pageNumber} of Document with ID {id}.",
        "operationId": "pageUsingGET",
        "produces": [
          "image/png",
          "image/webp"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          },
          {
            "name": "pageNumber",
            "in": "path",
            "description": "Page number",
            "required": true,
            "type": "integer",
            "format": "int32",
            "x-example": 1
          },
          {
            "name": "scale",
            "in": "query",
            "description": "Scaling factor",
            "required": false,
            "type": "string",
            "default": "100",
            "allowEmptyValue": false,
            "x-example": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/seal": {
      "post": {
        "tags": [
          "/seal"
        ],
        "summary": "Seal a document with a legal entity signature",
        "operationId": "sealUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "seal",
            "description": "seal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Seal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SealResult"
            }
          },
          "400": {
            "description": "The  user doesn't have a valid seal account associated"
          },
          "406": {
            "description": "PDF document loading error: the document is either corrupt or encrypted"
          }
        },
        "deprecated": false
      }
    },
    "/signature-requests": {
      "get": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "List all SignatureRequests.",
        "operationId": "listUsingGET_1",
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "account_email",
            "in": "query",
            "description": "Filter for 'signatures.account_email'",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "person_1@company_a.com"
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "Filter for 'created_by'",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "person_1@company_a.com"
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "Pagination - Page number",
            "required": false,
            "type": "integer",
            "default": -1,
            "format": "int32",
            "allowEmptyValue": false,
            "x-example": 0
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Pagination - Page size ",
            "required": false,
            "type": "integer",
            "default": 50,
            "format": "int32",
            "allowEmptyValue": false,
            "x-example": 25
          },
          {
            "name": "search",
            "in": "query",
            "description": "Filter for 'title'",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "my search string"
          },
          {
            "name": "signature_status",
            "in": "query",
            "description": "Filter for 'signatures.status_code'",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "open"
          },
          {
            "name": "signatures_count",
            "in": "query",
            "description": "Filter for 'signatures_count'",
            "required": false,
            "type": "integer",
            "default": -1,
            "format": "int32",
            "allowEmptyValue": false,
            "x-example": 0
          },
          {
            "name": "signer_email_address",
            "in": "query",
            "description": "Filter for 'signatures.signer_email_address'",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "person_1@company_a.com"
          },
          {
            "name": "status_overall",
            "in": "query",
            "description": "Filter for 'status_overall'",
            "required": false,
            "type": "string",
            "allowEmptyValue": false,
            "x-example": "open"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SignatureRequest"
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Create a SignatureRequest.",
        "operationId": "createV1UsingPOST",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createSignatureRequest",
            "description": "createSignatureRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignatureRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Either `content_type`+`content` or `file_url` or `document_id` are required."
          },
          "406": {
            "description": "PDF document loading error: the document is either corrupt or encrypted"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Update SignatureRequest.",
        "operationId": "updateV1UsingPUT",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "updateSignatureRequest",
            "description": "updateSignatureRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSignatureRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/signature-requests/{id}": {
      "get": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Get meta data of SignatureRequest with ID {id}.",
        "operationId": "getUsingGET_1",
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Delete SignatureRequest with ID {id}.",
        "operationId": "deleteUsingDELETE_1",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/signature-requests/{id}/callbacks": {
      "get": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "getCallbacks",
        "operationId": "getCallbacksUsingGET",
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Callback"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/signature-requests/{id}/remind": {
      "post": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Remind open signers of SignatureRequest with ID {id}.",
        "operationId": "remindUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/signature-requests/{id}/signatures": {
      "post": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Add signature to SignatureRequest with ID {id}.",
        "operationId": "addSignatureUsingPOST",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createSignatureDTO",
            "description": "createSignatureDTO",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSignature"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/signature-requests/{id}/signatures/{sid}": {
      "delete": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Remove signature with SID {sid} from SignatureRequest with ID {id}.",
        "operationId": "removeSignatureUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          },
          {
            "name": "sid",
            "in": "path",
            "description": "Signature ID",
            "required": true,
            "type": "string",
            "x-example": "55224466-ff00-4545-3210-0123456789999"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/user/assurance": {
      "post": {
        "tags": [
          "/user"
        ],
        "summary": "Check the assurance level of a person.",
        "operationId": "getAssuranceLevelUsingPOST",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssuranceLevelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a person's highest assurance level known to Skribble per provider.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssuranceLevelResponse"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/user/signature-qualities": {
      "get": {
        "tags": [
          "/user"
        ],
        "summary": "Get a user's signature qualities",
        "operationId": "getSignatureQualitiesUsingGET",
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Optional username or e-mail.",
            "required": false,
            "type": "string",
            "default": "calling user",
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSignatureQualities"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/signature-requests/{id}/attachments": {
      "post": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "createAttachment",
        "operationId": "createAttachmentUsingPOST",
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "createAttachmentDto",
            "description": "createAttachmentDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAttachment"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/v2/signature-requests/{id}/attachments/{attachmentId}": {
      "delete": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Delete Attachment with ID {attachment_id}.",
        "operationId": "deleteAttachmentUsingDELETE",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          },
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/v2/signature-requests/{id}/attachments/{attachmentId}/content": {
      "get": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Get content of Attachment with ID {attachmentId}.",
        "operationId": "contentAttachmentUsingGET",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          },
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/signature-requests/{id}/withdraw": {
      "post": {
        "tags": [
          "/signature-requests"
        ],
        "summary": "Withdraw from SignatureRequest with ID {id}.",
        "operationId": "withdrawUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SignatureRequest ID",
            "required": true,
            "type": "string",
            "x-example": "8229873d-d7c7-4e2b-a8a3-331353243d97"
          },
          {
            "in": "body",
            "name": "withdrawSignature",
            "description": "withdrawSignature",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WithdrawSignature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "Access Token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "AssuranceLevelRequest": {
      "type": "object",
      "required": [
        "mobile_number"
      ],
      "properties": {
        "mobile_number": {
          "type": "string",
          "example": 41791122333,
          "description": "Person's mobile phone number"
        }
      },
      "title": "AssuranceLevelRequest"
    },
    "AssuranceLevelResponse": {
      "type": "object",
      "properties": {
        "assurance_level": {
          "type": "string",
          "example": "qualified",
          "description": "A person's assurance level. Valid values are `qualified`, `advanced` or `none`"
        },
        "provider": {
          "type": "string",
          "example": "swisscom_ra_app",
          "description": "The provider of the identity assurance."
        },
        "serial_number": {
          "type": "string",
          "example": "MIDCHEWAV7RHB4V0",
          "description": "The serial number of the identity assurance."
        }
      },
      "title": "AssuranceLevelResponse"
    },
    "Callback": {
      "type": "object",
      "required": [
        "created_at",
        "owner",
        "read_access",
        "signature_request_id",
        "updated_at",
        "write_access"
      ],
      "properties": {
        "signature_request_id": {
          "type": "string",
          "format": "uuid",
          "example": "b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "Signature request's unique ID on Skribble."
        },
        "type": {
          "type": "string",
          "example": "SUCCESS",
          "description": "The type of this callback (SUCCESS, UPDATE, ERROR).",
          "enum": [
            "SUCCESS",
            "UPDATE",
            "ERROR"
          ]
        },
        "state": {
          "type": "string",
          "example": "COMPLETED",
          "description": "The status of this callback process (OPEN, COMPLETED, RESIGNATED).",
          "enum": [
            "OPEN",
            "COMPLETED",
            "RESIGNATED"
          ]
        },
        "url": {
          "type": "string",
          "example": "http://ext-service:8080/callback_success",
          "description": "The called URL of this callback."
        },
        "attempts": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The attempts this callback was carried out."
        },
        "messages": {
          "type": "array",
          "description": "Array of error messages in case that the callback failed",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "string",
          "example": "api@company_a.com",
          "description": "E-mail address of the object owner."
        },
        "read_access": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "E-mail addresses with read access to the object.",
          "items": {
            "type": "string"
          }
        },
        "write_access": {
          "type": "array",
          "example": [
            "person_1@company_a.com",
            "person_2@company_b.com"
          ],
          "description": "E-mail addresses with write access to the object.",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-11-28T11:51:58.637Z",
          "description": "The time at which the object was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-12-03T07:01:33.000Z",
          "description": "The time at which the object was last changed."
        }
      },
      "title": "Callback"
    },
    "CreateAttachment": {
      "type": "object",
      "required": [
        "content",
        "content_type",
        "filename"
      ],
      "properties": {
        "content_type": {
          "type": "string",
          "example": "image/png",
          "description": "Content type of bytes sent in `content`. Must be used together with `content`."
        },
        "filename": {
          "type": "string",
          "example": "TOU.pdf",
          "description": "Name of the attachment."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "example": "JVBERi0xLjMKJcTl8uX ...",
          "description": "Base64 encoded bytes of content. Must be used together with `content_type`. The value is *Write Only*."
        },
        "content_size": {
          "type": "integer",
          "format": "int32",
          "example": 3160,
          "description": "Size of `content` in bytes. Will be calculated by the storage system."
        }
      },
      "title": "CreateAttachment"
    },
    "CreateDocument": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "NDA",
          "description": "Title of the document."
        },
        "content_type": {
          "type": "string",
          "description": "Content type of bytes sent in `content`. Currently, only 'application/pdf' is supported. Must be used together with `content`.",
          "enum": [
            "application/pdf"
          ]
        },
        "content": {
          "type": "string",
          "format": "byte",
          "example": "JVBERi0xLjMKJcTl8uX ...",
          "description": "Base64 encoded bytes of document. Must be used together with `content_type`."
        },
        "file_url": {
          "type": "string",
          "example": "https://api.company_a.com/user/345/doc/9472/print",
          "description": "Publicly accessible URL for document download. This parameter is incompatible with `content`+`content_type`."
        },
        "read_access": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "E-mail addresses with read access to the object.",
          "items": {
            "type": "string"
          }
        },
        "write_access": {
          "type": "array",
          "example": [
            "person_1@company_a.com",
            "person_2@company_b.com"
          ],
          "description": "E-mail addresses with write access to the object.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CreateDocument"
    },
    "CreateSignature": {
      "type": "object",
      "properties": {
        "account_email": {
          "type": "string",
          "example": "walter.demo@company_a.com",
          "description": "Signer's e-mail address."
        },
        "signer_identity_data": {
          "description": "Signer's identity data.",
          "$ref": "#/definitions/SignerIdentityData"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Order can be used as custom field to implement a custom order functionality. For Skribble signing sequence use 'sequence'."
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Sequence in which this signer will sign starting with '1'. If no order is supplied, participants can sign in any order. If the field contains a number, Skribble will enforce an ascending order defined by `sequence` in which the signers sign the document."
        },
        "notify": {
          "type": "boolean",
          "example": false,
          "description": "Send e-mails to notify the signer about this signature request and for all updates to it's state. If set to `false`, no notifications will be sent by Skribble. Default is `true`"
        },
        "visual_signature": {
          "description": "The visual appearance of the signature",
          "$ref": "#/definitions/VisualSignature"
        },
        "language": {
          "type": "string",
          "description": "Language of the email sent to the invitee"
        }
      },
      "title": "CreateSignature"
    },
    "CreateSignatureRequest": {
      "type": "object",
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Please sign our NDA",
          "description": "Title of the signature request."
        },
        "message": {
          "type": "string",
          "example": "As discussed yesterday ...",
          "description": "Message sent to the other participants along with this signature request."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "example": "JVBERi0xLjMKJcTl8uX ...",
          "description": "Base64 encoded bytes of document. Must be used together with `content_type`. This parameter is incompatible with `file_url` and `document_id`."
        },
        "content_type": {
          "type": "string",
          "description": "Content type of bytes sent in `content`. Currently, only 'application/pdf' is supported. Must be used together with `content`. This parameter is incompatible with `file_url` and `document_id`.",
          "enum": [
            "application/pdf"
          ]
        },
        "file_url": {
          "type": "string",
          "example": "https://api.company_a.com/user/345/doc/9472/print",
          "description": "Publicly accessible URL for document download. This parameter is incompatible with `content`+`content_type` and `document_id`."
        },
        "document_id": {
          "type": "string",
          "example": "31d3dd7c-ea36-4948-8cb5-3e22a3d82933",
          "description": "Document ID of an existing document on Skribble. This parameter is incompatible with `content`+`content_type` and `file_url`."
        },
        "legislation": {
          "type": "string",
          "example": "ZERTES",
          "description": "Legislation of the signatures for this signature request. Default: ZERTES",
          "enum": [
            "EIDAS",
            "ZERTES"
          ]
        },
        "quality": {
          "type": "string",
          "example": "AES",
          "description": "Minimal quality of the signatures for this signature request. Default: QES",
          "enum": [
            "AES",
            "QES"
          ]
        },
        "signatures": {
          "type": "array",
          "description": "Which signatures should be created within this signature request.",
          "items": {
            "$ref": "#/definitions/CreateSignature"
          }
        },
        "cc_email_addresses": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "CC e-mail addresses notifications are sent to.",
          "items": {
            "type": "string"
          }
        },
        "callback_success_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/success?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called on overall success. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "callback_error_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/failure?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an error. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "callback_update_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/update?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an update. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "creator": {
          "type": "string",
          "example": "creator.user@skribble.com",
          "description": "The email of the user you want to impersonate on creating the signature request."
        },
        "attach_on_success": {
          "type": "array",
          "example": "SIGNED_DOCUMENT",
          "description": "Documents that will be attached additionally to the all-signatures-complete email.",
          "items": {
            "type": "string",
            "enum": [
              "SIGNED_DOCUMENT",
              "SIGNATURE_PROTOCOL"
            ]
          }
        },
        "custom": {
          "type": "string",
          "example": "CustomFieldA=customID,CustomFieldB=customValue",
          "description": "Custom field where own/customer settings related to this signature request can be stored for future actions. The field is limited to a maximum of 10000 characters."
        },
        "write_access": {
          "type": "array",
          "description": "Give existing users full write access to this signature request.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CreateSignatureRequest"
    },
    "Document": {
      "type": "object",
      "required": [
        "created_at",
        "owner",
        "read_access",
        "title",
        "updated_at",
        "write_access"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "Document's unique ID on Skribble."
        },
        "parent_id": {
          "type": "string",
          "example": "1e471d90-a3a9-4950-b209-d5b6e6107c79",
          "description": "ID of document’s parent. Will not exist for the original document."
        },
        "title": {
          "type": "string",
          "example": "NDA",
          "description": "Title of the document."
        },
        "content_type": {
          "type": "string",
          "description": "Content type of document. Currently only 'application/pdf' is supported.",
          "enum": [
            "application/pdf"
          ]
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "example": 37540,
          "description": "Content size in bytes."
        },
        "page_count": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Number of pages in the document."
        },
        "page_width": {
          "type": "integer",
          "format": "int32",
          "example": 596,
          "description": "Page width"
        },
        "page_height": {
          "type": "integer",
          "format": "int32",
          "example": 843,
          "description": "Page height"
        },
        "signature_fields": {
          "type": "array",
          "example": [],
          "description": "Signature fields",
          "items": {
            "$ref": "#/definitions/SignatureFieldInfo"
          }
        },
        "owner": {
          "type": "string",
          "example": "api@company_a.com",
          "description": "E-mail address of the object owner."
        },
        "read_access": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "E-mail addresses with read access to the object.",
          "items": {
            "type": "string"
          }
        },
        "write_access": {
          "type": "array",
          "example": [
            "person_1@company_a.com",
            "person_2@company_b.com"
          ],
          "description": "E-mail addresses with write access to the object.",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-11-28T11:51:58.637Z",
          "description": "The time at which the object was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-12-03T07:01:33.000Z",
          "description": "The time at which the object was last changed."
        }
      },
      "title": "Document"
    },
    "FieldImage": {
      "type": "object",
      "required": [
        "content",
        "content_type"
      ],
      "properties": {
        "content_type": {
          "type": "string",
          "example": "image/png",
          "description": "Content type of bytes sent in `content`. Must be used together with `content`."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "example": "JVBERi0xLjMKJcTl8uX ...",
          "description": "Base64 encoded bytes of content. Must be used together with `content_type`. The value is *Write Only*."
        },
        "content_size": {
          "type": "integer",
          "format": "int32",
          "example": 3160,
          "description": "Size of `content` in bytes. Will be calculated by the storage system."
        }
      },
      "title": "FieldImage",
      "description": "Defines an image to be used inside a field."
    },
    "LoginRequest": {
      "type": "object",
      "required": [
        "api-key",
        "username"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "Customer_A",
          "description": "The username of the users credentials to login."
        },
        "api-key": {
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000",
          "description": "The API key  of the users credentials to login."
        }
      },
      "title": "LoginRequest"
    },
    "Position": {
      "type": "object",
      "properties": {
        "invisible": {
          "type": "boolean"
        },
        "x": {
          "type": "number",
          "format": "float",
          "example": 10
        },
        "y": {
          "type": "number",
          "format": "float",
          "example": 180
        },
        "width": {
          "type": "number",
          "format": "float",
          "example": 200
        },
        "height": {
          "type": "number",
          "format": "float",
          "example": 40
        },
        "page": {
          "type": "string",
          "example": 0,
          "description": "Page index starting at '0'."
        },
        "rotation": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Defines a rotation of the field content. If used in context with a form field, then only the values 0, 90, 180, 270 are legal. Otherwise every value is legal. The rotation is applied counter clockwise. "
        }
      },
      "title": "Position",
      "description": "A position in the PDF coordinate system."
    },
    "Seal": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Please sign our NDA",
          "description": "Title of the document, can be empty."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "example": "JVBERi0xLjMKJcTl8uX ...",
          "description": "Base64 encoded bytes of document."
        },
        "visual_signature": {
          "description": "The visual appearance of the signature.",
          "$ref": "#/definitions/VisualSignature"
        },
        "account_name": {
          "type": "string",
          "example": "ais_demo_seal",
          "description": "Account name of the seal contract that should be used."
        }
      },
      "title": "Seal"
    },
    "SealResult": {
      "type": "object",
      "required": [
        "document_id"
      ],
      "properties": {
        "document_id": {
          "type": "string",
          "example": "e4cde459-6e63-0095-10b8-55b39ec39f46",
          "description": "ID of the sealed document."
        }
      },
      "title": "SealResult"
    },
    "Signature": {
      "type": "object",
      "required": [
        "account_email"
      ],
      "properties": {
        "sid": {
          "type": "string",
          "example": "acbd44ff-feef-effe-bad1-22b0111baca",
          "description": "ID of this signature"
        },
        "account_email": {
          "type": "string",
          "example": "walter.demo@company_a.com",
          "description": "Signer's e-mail address."
        },
        "signer_identity_data": {
          "description": "Signer's identity data.",
          "$ref": "#/definitions/SignerIdentityData"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Order can be used as custom field to implement a custom order functionality. For Skribble signing sequence use 'sequence'."
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Sequence in which this signer will sign starting with '1'. If no order is supplied, participants can sign in any order. If the field contains a number, Skribble will enforce an ascending order defined by `sequence` in which the signers sign the document."
        },
        "status_code": {
          "type": "string",
          "description": "Current status of signature.",
          "enum": [
            "open",
            "waiting",
            "declined",
            "withdrawn",
            "signed",
            "undefined",
            "error"
          ]
        },
        "notify": {
          "type": "boolean",
          "example": false,
          "description": "Send e-mails to notify the signer about this signature request and for all updates to it's state. If set to `false`, no notifications will be sent by Skribble. Default is `true`"
        },
        "signing_url": {
          "type": "string"
        },
        "decline_message": {
          "type": "string",
          "example": "I declined because of a good reason.",
          "description": "Decline message from the signature decliner."
        },
        "signed_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-12-03T07:01:33.000Z",
          "description": "Time at which the signature was given."
        },
        "signed_legislation": {
          "type": "string",
          "example": "ZERTES",
          "description": "Time at which the signature was given.",
          "enum": [
            "UNDEFINED",
            "EIDAS",
            "ZERTES"
          ]
        },
        "signed_quality": {
          "type": "string",
          "example": "QES",
          "description": "Time at which the signature was given.",
          "enum": [
            "QES",
            "AES_MINIMAL",
            "AES",
            "PART11",
            "SES",
            "DEMO"
          ]
        },
        "last_viewed_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-12-03T07:01:33.000Z",
          "description": "The time at which the document was last opened in Skribble's viewer."
        },
        "visual_signature": {
          "description": "The visual appearance of the signature.",
          "$ref": "#/definitions/VisualSignature"
        },
        "language": {
          "type": "string",
          "example": "DE",
          "description": "Language of the invitation email."
        }
      },
      "title": "Signature"
    },
    "SignatureFieldInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Position"
          }
        },
        "signed": {
          "type": "boolean"
        }
      },
      "title": "SignatureFieldInfo"
    },
    "SignatureRequest": {
      "type": "object",
      "required": [
        "created_at",
        "document_id",
        "id",
        "owner",
        "read_access",
        "signatures",
        "title",
        "updated_at",
        "write_access"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "Signature request's unique ID on Skribble."
        },
        "title": {
          "type": "string",
          "example": "Please sign our NDA",
          "description": "Title of the signature request."
        },
        "message": {
          "type": "string",
          "example": "As discussed yesterday ...",
          "description": "Message sent to the other participants along with this signature request."
        },
        "document_id": {
          "type": "string",
          "example": "1e471d90-a3a9-4950-b209-d5b6e6107c79",
          "description": "The document to sign."
        },
        "legislation": {
          "type": "string",
          "example": "ZERTES",
          "description": "Legislation of the signatures for this signature request. Default: ZERTES",
          "enum": [
            "EIDAS",
            "ZERTES"
          ]
        },
        "quality": {
          "type": "string",
          "example": "AES",
          "description": "Minimal quality of the signatures for this signature request. Default: QES",
          "enum": [
            "AES",
            "QES"
          ]
        },
        "signing_url": {
          "type": "string",
          "example": "https://my.skribble.com/sign?id=b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "URL on Skribble's platform where authorized users can view and sign the signature request."
        },
        "status_overall": {
          "type": "string",
          "description": "Signature request's status based on all requested signature's individual statuses.",
          "enum": [
            "open",
            "waiting",
            "declined",
            "withdrawn",
            "signed",
            "undefined",
            "error"
          ]
        },
        "business": {
          "type": "string",
          "description": "Business of signature request."
        },
        "signatures": {
          "type": "array",
          "description": "Requested signatures of this signature request.",
          "items": {
            "$ref": "#/definitions/Signature"
          }
        },
        "cc_email_addresses": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "CC e-mail addresses notifications are sent to.",
          "items": {
            "type": "string"
          }
        },
        "expiration_date": {
          "type": "string",
          "format": "date",
          "example": "2099-06-30",
          "description": "Expiration date of this signature request. Date scheduled at this time when automatic deletion will remove the signature request."
        },
        "attach_on_success": {
          "type": "array",
          "example": "SIGNED_DOCUMENT",
          "description": "Documents that will be attached additionally to the all-signatures-complete email.",
          "items": {
            "type": "string",
            "enum": [
              "SIGNED_DOCUMENT",
              "SIGNATURE_PROTOCOL"
            ]
          }
        },
        "callback_success_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/success?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called on overall success. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "callback_error_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/failure?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an error. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "callback_update_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/update?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an update. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "custom": {
          "type": "string",
          "example": "CustomFieldA=customID,CustomFieldB=customValue",
          "description": "Custom field where own/customer settings related to this signature request can be stored for future actions. The field is limited to a maximum of 10000 characters."
        },
        "owner": {
          "type": "string",
          "example": "api@company_a.com",
          "description": "E-mail address of the object owner."
        },
        "attachments": {
          "type": "array",
          "description": "File attachments to this signature request",
          "items": {
            "$ref": "#/definitions/SignatureRequestAttachment"
          }
        },
        "read_access": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "E-mail addresses with read access to the object.",
          "items": {
            "type": "string"
          }
        },
        "write_access": {
          "type": "array",
          "example": [
            "person_1@company_a.com",
            "person_2@company_b.com"
          ],
          "description": "E-mail addresses with write access to the object.",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-11-28T11:51:58.637Z",
          "description": "The time at which the object was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-12-03T07:01:33.000Z",
          "description": "The time at which the object was last changed."
        }
      },
      "title": "SignatureRequest"
    },
    "SignatureRequestAttachment": {
      "type": "object",
      "properties": {
        "attachment_id": {
          "type": "string",
          "format": "uuid"
        },
        "filename": {
          "type": "string"
        }
      },
      "title": "SignatureRequestAttachment"
    },
    "SignatureRequest«object»": {
      "type": "object",
      "required": [
        "created_at",
        "document_id",
        "id",
        "owner",
        "read_access",
        "signatures",
        "title",
        "updated_at",
        "write_access"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "Signature request's unique ID on Skribble."
        },
        "title": {
          "type": "string",
          "example": "Please sign our NDA",
          "description": "Title of the signature request."
        },
        "message": {
          "type": "string",
          "example": "As discussed yesterday ...",
          "description": "Message sent to the other participants along with this signature request."
        },
        "document_id": {
          "type": "string",
          "example": "1e471d90-a3a9-4950-b209-d5b6e6107c79",
          "description": "The document to sign."
        },
        "legislation": {
          "type": "string",
          "example": "ZERTES",
          "description": "Legislation of the signatures for this signature request. Default: ZERTES",
          "enum": [
            "EIDAS",
            "ZERTES"
          ]
        },
        "quality": {
          "type": "string",
          "example": "AES",
          "description": "Minimal quality of the signatures for this signature request. Default: QES",
          "enum": [
            "AES",
            "QES"
          ]
        },
        "signing_url": {
          "type": "string",
          "example": "https://my.skribble.com/sign?id=b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "URL on Skribble's platform where authorized users can view and sign the signature request."
        },
        "status_overall": {
          "type": "string",
          "description": "Signature request's status based on all requested signature's individual statuses.",
          "enum": [
            "open",
            "waiting",
            "declined",
            "withdrawn",
            "signed",
            "undefined",
            "error"
          ]
        },
        "business": {
          "type": "string",
          "description": "Business of signature request."
        },
        "signatures": {
          "type": "array",
          "description": "Requested signatures of this signature request.",
          "items": {
            "type": "object"
          }
        },
        "cc_email_addresses": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "CC e-mail addresses notifications are sent to.",
          "items": {
            "type": "string"
          }
        },
        "expiration_date": {
          "type": "string",
          "format": "date",
          "example": "2099-06-30",
          "description": "Expiration date of this signature request. Date scheduled at this time when automatic deletion will remove the signature request."
        },
        "attach_on_success": {
          "type": "array",
          "example": "SIGNED_DOCUMENT",
          "description": "Documents that will be attached additionally to the all-signatures-complete email.",
          "items": {
            "type": "string",
            "enum": [
              "SIGNED_DOCUMENT",
              "SIGNATURE_PROTOCOL"
            ]
          }
        },
        "callback_success_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/success?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called on overall success. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "callback_error_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/failure?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an error. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "callback_update_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/update?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an update. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values."
        },
        "custom": {
          "type": "string",
          "example": "CustomFieldA=customID,CustomFieldB=customValue",
          "description": "Custom field where own/customer settings related to this signature request can be stored for future actions. The field is limited to a maximum of 10000 characters."
        },
        "owner": {
          "type": "string",
          "example": "api@company_a.com",
          "description": "E-mail address of the object owner."
        },
        "attachments": {
          "type": "array",
          "description": "File attachments to this signature request",
          "items": {
            "$ref": "#/definitions/SignatureRequestAttachment"
          }
        },
        "read_access": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "E-mail addresses with read access to the object.",
          "items": {
            "type": "string"
          }
        },
        "write_access": {
          "type": "array",
          "example": [
            "person_1@company_a.com",
            "person_2@company_b.com"
          ],
          "description": "E-mail addresses with write access to the object.",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-11-28T11:51:58.637Z",
          "description": "The time at which the object was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "example": "2018-12-03T07:01:33.000Z",
          "description": "The time at which the object was last changed."
        }
      },
      "title": "SignatureRequest«object»"
    },
    "SignerIdentityData": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "example": "swisscom_ra_app",
          "description": "Evidence provider"
        },
        "first_name": {
          "type": "string",
          "example": "Walter",
          "description": "First name of no-account-signer"
        },
        "last_name": {
          "type": "string",
          "example": "Demo",
          "description": "Last name of no-account-signer"
        },
        "mobile_number": {
          "type": "string",
          "example": 41791234567,
          "description": "Mobile number of no-account-signer"
        },
        "email_address": {
          "type": "string",
          "example": "walter.demo@somecompany.com",
          "description": "E-Mail address of no-account-signer"
        },
        "language": {
          "type": "string",
          "example": "DE",
          "description": "Language code for the resulting no-account-signer"
        }
      },
      "title": "SignerIdentityData"
    },
    "UpdateSignatureRequest": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "b107da0e-db25-478a-8130-b85e6c57ae83",
          "description": "Signature request's unique ID on Skribble."
        },
        "title": {
          "type": "string",
          "example": "Please sign our NDA",
          "description": "Title of the signature request. Need `UPDATE` right to change."
        },
        "message": {
          "type": "string",
          "example": "As discussed yesterday ...",
          "description": "Message sent to the other participants along with this signature request. Need `UPDATE` right to change."
        },
        "legislation": {
          "type": "string",
          "example": "ZERTES",
          "description": "Legislation of the signatures for this signature request. Default: ZERTES",
          "enum": [
            "EIDAS",
            "ZERTES"
          ]
        },
        "quality": {
          "type": "string",
          "example": "AES",
          "description": "Minimal quality of the signatures for this signature request. Default: QES",
          "enum": [
            "AES",
            "QES"
          ]
        },
        "signatures": {
          "type": "array",
          "description": "Which signatures should be created within this signature request. Need `MODIFY_SIGNERS` right to change.",
          "items": {
            "$ref": "#/definitions/CreateSignature"
          }
        },
        "cc_email_addresses": {
          "type": "array",
          "example": [
            "backoffice@company_a.com"
          ],
          "description": "CC e-mail addresses notifications are sent to. Need `MODIFY_ACCESS` right to change.",
          "items": {
            "type": "string"
          }
        },
        "callback_success_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/success?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called on overall success. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values. Need `UPDATE` right to change."
        },
        "callback_error_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/failure?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an error. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values. Need `UPDATE` right to change."
        },
        "callback_update_url": {
          "type": "string",
          "example": "https://api.company_a.com/callback/update?document_id=SKRIBBLE_DOCUMENT_ID&req_id=SKRIBBLE_SIGNATURE_REQUEST_ID",
          "description": "Callback-URL which is called in case of an update. There are two template variables: SKRIBBLE_DOCUMENT_ID and SKRIBBLE_SIGNATURE_REQUEST_ID. Both are replaced before the callback by with their current values. Need `UPDATE` right to change."
        },
        "attach_on_success": {
          "type": "array",
          "example": "SIGNED_DOCUMENT",
          "description": "Documents that will be attached additionally to the all-signatures-complete email.",
          "items": {
            "type": "string",
            "enum": [
              "SIGNED_DOCUMENT",
              "SIGNATURE_PROTOCOL"
            ]
          }
        },
        "write_access": {
          "type": "array",
          "example": [
            "person_1@company_a.com",
            "person_2@company_b.com"
          ],
          "description": "E-mail addresses with write access to the object. Need `MODIFY_ACCESS` right to change.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "UpdateSignatureRequest",
      "description": "Update an existing `SignatureRequest`. Send only the fields, which shall be updated."
    },
    "UserSignatureQualities": {
      "type": "object",
      "properties": {
        "qes": {
          "description": "SR quality: QES",
          "$ref": "#/definitions/UserSignatureQualityQes"
        },
        "aes_minimal": {
          "description": "SR quality: AES_MINIMAL",
          "$ref": "#/definitions/UserSignatureQualityAesMinimal"
        },
        "aes": {
          "description": "SR quality: AES",
          "$ref": "#/definitions/UserSignatureQualityAes"
        },
        "ses": {
          "description": "SR quality: SES",
          "$ref": "#/definitions/UserSignatureQualitySes"
        }
      },
      "title": "UserSignatureQualities"
    },
    "UserSignatureQualityAes": {
      "type": "object",
      "properties": {
        "any": {
          "type": "string",
          "example": "AES",
          "description": "SR quality: AES / *"
        }
      },
      "title": "UserSignatureQualityAes",
      "description": "Closest match to AES"
    },
    "UserSignatureQualityAesMinimal": {
      "type": "object",
      "properties": {
        "zertes": {
          "type": "string",
          "example": "QES",
          "description": "SR quality: AES_MINIMAL / ZERTES"
        },
        "eidas": {
          "type": "string",
          "example": "AES",
          "description": "SR quality: AES_MINIMAL / EIDAS"
        }
      },
      "title": "UserSignatureQualityAesMinimal",
      "description": "Best possible quality, but AES at a minimum"
    },
    "UserSignatureQualityQes": {
      "type": "object",
      "properties": {
        "zertes": {
          "type": "string",
          "example": "QES",
          "description": "SR quality: QES / ZERTES"
        },
        "eidas": {
          "type": "string",
          "example": "null",
          "description": "SR quality: QES / EIDAS"
        }
      },
      "title": "UserSignatureQualityQes"
    },
    "UserSignatureQualitySes": {
      "type": "object",
      "properties": {
        "any": {
          "type": "string",
          "example": "SES",
          "description": "SR quality: SES / *"
        }
      },
      "title": "UserSignatureQualitySes"
    },
    "VisualSignature": {
      "type": "object",
      "properties": {
        "form_field": {
          "type": "string",
          "example": "Signature_field_2",
          "description": "Name of the document’s form field in which the signature is placed. Takes precedence before `position`."
        },
        "position": {
          "description": "DEPRECATED since API v2 - Use positions instead. The position in the PDF coordinate system, where a new signature field will be created.",
          "$ref": "#/definitions/Position"
        },
        "positions": {
          "type": "array",
          "description": "List of positions in the PDF coordinate system where the visual signatures will be placed.",
          "items": {
            "$ref": "#/definitions/Position"
          }
        },
        "image": {
          "description": "The image to display inside the form field",
          "$ref": "#/definitions/FieldImage"
        }
      },
      "title": "VisualSignature",
      "description": "Defines the appearance of a signature in a document. If no appearance is defined, the signature will be invisible, which is a valid option."
    },
    "WithdrawSignature": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "The reason for withdrawing the signature.",
          "description": "Withdraw message."
        }
      },
      "title": "WithdrawSignature"
    }
  }
}